<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<artifactId>back-end</artifactId>
	<packaging>jar</packaging>

	<parent>
		<groupId>org.test.barna</groupId>
		<artifactId>parent</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<name>back-end</name>
	<url>http://maven.apache.org</url>

	<properties>
		<!-- This property is very important albeit rarely emphasized. Why? Because 
			every time you try to read a file, you need to know its encoding to decipher 
			it. For instance if a file is in encoding ASCII, a character would be encoded 
			on only 8 bits or 1 byte, whereas in UTF8 it will be between 8 and 32 bits 
			(or 1 and 4 bytes). Then a character, for instance 'A' in ASCII has value 
			0x41 (in hexadecimal) or 65 (decimal) whereas in UTF8 it is 65 (in decimal) 
			however since there are 4 bytes to use up, in hex it is 0x00000041 (most 
			of the time the 4 leading zeroes can be forgotten as it is obvious there 
			are 4 bytes and if forgotten the 2 first bytes are 0) -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>5.3.0.Beta1</version>
		</dependency>
		<dependency>
			<groupId>org.mariadb.jdbc</groupId>
			<artifactId>mariadb-java-client</artifactId>
			<version>2.2.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>5.0.3.RELEASE</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-beans -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>5.0.3.RELEASE</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.0.3.RELEASE</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>5.0.3.RELEASE</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework/spring-orm -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>5.0.3.RELEASE</version>
		</dependency>

		<!-- <dependency> -->
		<!-- <groupId>org.springframework</groupId> -->
		<!-- <artifactId>spring-context</artifactId> -->
		<!-- <version>5.0.3.RELEASE</version> -->
		<!-- </dependency> -->

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Here we tell the maven assembly plugin to be configured to integrate -->
			<!-- the dependencies inside the produced jar to have a big archive and -->
			<!-- which class is the Main class to add it to the Manifest so that it 
				can be ran with `java -jar target/jdbc-mysql-0.0.1-SNAPSHOT-jar-with-dependencies.jar` 
				from the command line -->
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<archive>
						<!-- The fully qualified name here is needed, i.e. packageName.MainClassName -->
						<manifest>
							<mainClass>org.test.jdbc_mysql.Main</mainClass>
						</manifest>
					</archive>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
				</configuration>
				<executions>
					<execution>
						<!-- Here we tell the maven assembly to run during (or after) the package 
							phase -->
						<phase>package</phase>
						<goals>
							<!-- Here we tell the assembly to run the goal "single" when the package 
								phase is invoked -->
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Here we use the compiler plugin to indicate we want to use Java 1.8 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.6.0</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
